{"version":3,"sources":["screens/Landing.tsx","components/Board.tsx","App.tsx","screens/InGame.tsx","screens/Lobby.tsx","screens/GameOver.tsx","serviceWorker.ts","index.tsx"],"names":["Landing","props","state","socket","firstForm","createRoomSubmit","nu","username","trim","ng","roomName","setState","isFormOneValidated","length","emit","mod","gameMode","toLowerCase","connectRoomOnSubmit","e","preventDefault","isFormTwoValidated","game_id","gameId","board","this","on","data","hosting","players","onConnect","isHost","np","style","height","width","display","alignItems","justifyContent","margin","minHeight","flexDirection","minWidth","marginTop","Accordion","Card","Header","Toggle","as","Button","variant","eventKey","Collapse","Body","Form","ref","r","validated","onSubmit","Group","controlId","Label","Control","required","placeholder","value","onChange","target","Check","type","label","checked","Number","React","PureComponent","GameState","Board","lastFocused","performOnCheck","onCheck","initalBoard","selected","arr","res","forEach","row","curr","col","push","Styles","styled","div","createElement","map","i","j","split","k","pi","pj","border","borderRight","borderBottom","onFocus","id","disabled","autoFocus","backgroundColor","color","className","key","valnum","val","charAt","cpy","copy2dArray","isNaN","error","timeParser","millis","hrs","Math","floor","toString","mins","secs","InGame","timer","ingameBoard","updatePlayer","n","filter","time_passed","originalBoard","setInterval","parsed","ListGroup","pl","Item","finished","join","Footer","onClick","Lobby","player","isReady","fontWeight","ready","onStart","GameOver","playersSorted","sort","a","b","Table","striped","bordered","hover","colSpan","App","onEnd","gameState","OVER","userId","LANDING","startingDate","io","user_id","message","alert","p","Date","now","PLAYING","player_finished_count","LOBBY","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.f8e46eb9.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Accordion from \"react-bootstrap/Accordion\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Button from \"react-bootstrap/Button\"\r\n;\r\n\r\nimport styled from \"styled-components\";\r\n\r\nconst StyleCreator = (options?: any) => styled.div\r\n`\r\n\r\n`\r\ninterface LandingState {\r\n    isFormTwoValidated: boolean,\r\n    isFormOneValidated: boolean,\r\n    username: string,\r\n    roomName: string,\r\n    gameId: number,\r\n    board: number[][],\r\n    gameMode: string,\r\n}\r\nexport default class Landing extends React.PureComponent<any, LandingState> {\r\n    state: LandingState;\r\n    socket: SocketIOClient.Socket;\r\n    firstForm: any = null;\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            isFormTwoValidated: false,\r\n            isFormOneValidated: false,\r\n            username: \"\",\r\n            roomName: \"\",\r\n            gameId: -1,\r\n            board: [],\r\n            gameMode: \"Easy\"\r\n        }\r\n        this.socket = props.socket;\r\n    }\r\n    componentDidMount() {\r\n        this.socket.on('game_data', (data: any) => {\r\n            let {game_id, board, hosting, roomName, players} = data;\r\n            this.props.onConnect({\r\n                gameId: game_id,\r\n                board,\r\n                username: this.state.username,\r\n                roomName,\r\n                isHost: hosting,\r\n                players\r\n            });\r\n        });\r\n    }\r\n    createRoomSubmit = () => {\r\n      let nu = this.state.username.trim();\r\n      let ng = this.state.roomName.trim();\r\n      this.setState({\r\n        username: nu,\r\n        roomName: ng,\r\n        isFormOneValidated: true\r\n      });\r\n      if(nu.length === 0 || ng.length === 0) return;\r\n        this.socket.emit('create_game', {\r\n            roomName: ng,\r\n            username: nu,\r\n            mod: this.state.gameMode.toLowerCase()\r\n        });\r\n    }\r\n    connectRoomOnSubmit = (e: any) => {\r\n      e.preventDefault();\r\n      let nu = this.state.username.trim();\r\n      let ng = this.state.roomName.trim();\r\n      this.setState({\r\n        username: nu,\r\n        roomName: ng,\r\n        isFormTwoValidated: true\r\n      });\r\n      this.socket.emit('connect_game', {game_id: this.state.gameId, username: nu});\r\n    }\r\n    componentWillReceiveProps(np: any) {\r\n        if(np.socket) {\r\n            this.socket = np.socket;\r\n        }\r\n        this.setState(this.state);\r\n    }\r\n    render(): React.ReactNode {\r\n        return(\r\n            <div style={{height: \"100vh\"}}>\r\n                <div style={{width: \"100%\", display: \"flex\", alignItems: \"center\", justifyContent: \"center\", margin: \"10vh 0px 3vh 0px\"}}>\r\n                  <h1>Sudoku Race</h1>\r\n                </div>\r\n<div style={{width: \"100vw\", minHeight: \"20%\", display: \"flex\", flexDirection: \"column\", alignItems: \"center\", justifyContent: \"center\"}}>           \r\n              <div style={{minWidth: \"50%\", minHeight: \"20%\", marginTop: \"3vh\"}}>\r\n              <Accordion>\r\n                <Card>\r\n                  <Card.Header>\r\n                    <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"0\">\r\n                      Create Game\r\n                    </Accordion.Toggle>\r\n                  </Card.Header>\r\n                  <Accordion.Collapse eventKey=\"0\">\r\n                    <Card.Body>\r\n                    <Form ref={(r: any) => this.firstForm = r} validated={this.state.isFormOneValidated} onSubmit={(e: any) => {\r\n                      e.preventDefault();\r\n                      this.createRoomSubmit();\r\n                    }}>\r\n                      <Form.Group controlId=\"formUsername\">\r\n                        <Form.Label>Username</Form.Label>\r\n                        <Form.Control required placeholder=\"Pick a username\" value={this.state.username} onChange={(e: any) => {\r\n                          e.preventDefault();\r\n                          this.setState({\r\n                            username: e.target.value\r\n                          })\r\n                        }}/>\r\n                      </Form.Group>\r\n                      <Form.Group controlId=\"formRoomname\">\r\n                        <Form.Label>Room Name</Form.Label>\r\n                        <Form.Control required placeholder=\"Enter a room name\" value={this.state.roomName} onChange={(e: any) => {\r\n                          e.preventDefault();\r\n                          this.setState({\r\n                            roomName: e.target.value\r\n                          })\r\n                        }}/>\r\n                      </Form.Group>\r\n                      <Form.Group controlId=\"modCheck\">\r\n                        <Form.Label>Game mod</Form.Label>\r\n                        <Form.Check type=\"radio\" label=\"Easy\" checked={this.state.gameMode === \"Easy\"} onChange={(e: any) => this.setState({gameMode: \"Easy\"})}/>\r\n                        <Form.Check type=\"radio\" label=\"Medium\" checked={this.state.gameMode === \"Medium\"} onChange={(e: any) => this.setState({gameMode: \"Medium\"})}/>\r\n                        <Form.Check type=\"radio\" label=\"Hard\" checked={this.state.gameMode === \"Hard\"} onChange={(e: any) => this.setState({gameMode: \"Hard\"})}/>\r\n                      </Form.Group>\r\n                      <Button variant=\"primary\" type=\"submit\">\r\n                        Create\r\n                      </Button>\r\n                    </Form>\r\n                    </Card.Body>\r\n                  </Accordion.Collapse>\r\n                </Card>\r\n                <Card>\r\n                  <Card.Header>\r\n                    <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"1\">\r\n                      Connect a game\r\n                    </Accordion.Toggle>\r\n                  </Card.Header>\r\n                  <Accordion.Collapse eventKey=\"1\">\r\n                    <Card.Body>\r\n                    <Form \r\n                        onSubmit={this.connectRoomOnSubmit}\r\n                    >\r\n                      <Form.Group controlId=\"formUsernameConnect\">\r\n                        <Form.Label>Username</Form.Label>\r\n                        <Form.Control required placeholder=\"Pick a username\" value={this.state.username} onChange={(e: any) => {\r\n                          e.preventDefault();\r\n                          this.setState({\r\n                            username: e.target.value\r\n                          })\r\n                        }}/>\r\n                      </Form.Group>\r\n                      <Form.Group controlId=\"formRoomnameConnect\">\r\n                        <Form.Label>Game Id</Form.Label>\r\n                        <Form.Control required placeholder=\"Enter id of the game\" value={this.state.gameId} onChange={(e: any) => {\r\n                          e.preventDefault();\r\n                          this.setState({\r\n                            gameId: Number(e.target.value)\r\n                          })\r\n                        }}/>\r\n                      </Form.Group>\r\n                      <Button variant=\"primary\" type=\"submit\">\r\n                        Connect\r\n                      </Button>\r\n                    </Form>\r\n                    </Card.Body>\r\n                  </Accordion.Collapse>\r\n                </Card>\r\n              </Accordion>\r\n              </div>\r\n            </div> \r\n            </div>\r\n        )\r\n    }\r\n}","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\ninterface BoardProps {\r\n    initalBoard: Array<Array<any>>,\r\n    width?: number,\r\n    height?: number,\r\n    onCheck: any\r\n}\r\n\r\ninterface BoardState {\r\n    board: Array<Array<any>>,\r\n    selected: string\r\n}\r\n\r\nconst StylesCreateor = (options?: any) => styled.div `\r\n    input {\r\n        border: none;\r\n        background-color: transparent;\r\n        &:focus {\r\n            outline: none;\r\n        }\r\n        width: 90%;\r\n        height: 90%;\r\n        font-size: 4vw;\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        text-align: center;\r\n    }\r\n    .cell {\r\n        background-color: #edebe6;\r\n        font-color: black;\r\n    }\r\n    .disabled {\r\n        background-color: transparent;\r\n        font-color: gray;\r\n    }\r\n`\r\n\r\nexport default class Board extends React.PureComponent<BoardProps, BoardState> {\r\n    state: BoardState;\r\n    lastFocused: string = \"0|0\";\r\n    constructor(props: BoardProps) {\r\n        super(props);\r\n        this.state = {\r\n            board: props.initalBoard ? props.initalBoard : \r\n            [\r\n                [\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"],\r\n                [\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"],\r\n                [\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"],\r\n                [\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"],\r\n                [\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"],\r\n                [\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"],\r\n                [\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"],\r\n                [\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"],\r\n                [\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"],\r\n            ],\r\n            selected: \"0|0\"\r\n        }\r\n    }\r\n    copy2dArray(arr: any[][]): any[][] {\r\n        let res: any[][] = [];\r\n        arr.forEach(row => {\r\n            var curr: any[] = [];\r\n            row.forEach(col => curr.push(col));\r\n            res.push(curr);\r\n        })\r\n        return res;\r\n    }\r\n    performOnCheck = () => {\r\n        this.props.onCheck(this.state.board);\r\n    }\r\n    componentDidMount() {\r\n        \r\n    }\r\n    render(): React.ReactNode {\r\n        var Styles = StylesCreateor();\r\n        return(\r\n            <Styles>\r\n                {React.createElement('div',null, ...this.state.board.map((row, i) => React.createElement('div', {style: {\r\n                    display: \"flex\",\r\n                    flexDirection: \"row\"\r\n                }}, ...row.map((col, j) => {\r\n                                        let [pi, pj] = this.state.selected.split(\"|\").map(k => Number(k));\r\n                                        return (<div style={{\r\n                                            display: \"flex\",\r\n                                            alignItems: \"center\",\r\n                                            justifyContent: \"center\",\r\n                                            border: \"solid 1px gray\",\r\n                                            width: \"5vw\",\r\n                                            height: \"5vw\",\r\n                                            borderRight: (j === 2 || j === 5) ? \"solid 0.4vw #797979\" : \"solid 1px gray\",\r\n                                            borderBottom: (i === 2 || i === 5) ? \"solid 0.4vw #797979\" : \"solid 1px gray\"\r\n                                            \r\n                                            }}>\r\n                                            <input onFocus={e => {\r\n                                                this.lastFocused =  e.target.id;\r\n                                                this.setState({selected: e.target.id});\r\n                                            }}\r\n                                            disabled={this.props.initalBoard ? this.props.initalBoard[i][j] !== \"\" : false}\r\n                                            autoFocus={this.lastFocused === `${i}|${j}`}\r\n                                            style={(i === pi || j === pj) ? ({backgroundColor:\" #edebe6\",color:\"black\"}) : ({backgroundColor:\" transparent\",color:\"gray\"})} className={col === 0 ? \"cell\" : \"disabled cell\"} id={`${i}|${j}`} key={`${i}|${j}`} value={col} onChange={e => {\r\n                                                let val: string = e.target.value.trim();\r\n                                                let valnum: number;\r\n                                                try {\r\n                                                    if(val === \"\") {\r\n                                                        valnum = 0;\r\n                                                    } else {\r\n                                                        valnum = Number(val.charAt(val.length - 1));\r\n                                                    }\r\n                                                    let cpy = this.copy2dArray(this.state.board);\r\n                                                    cpy[i][j] = isNaN(valnum) ? 0 : valnum;\r\n                                                    this.setState({board: cpy});\r\n                                                } catch(error) {}\r\n                                            }}/>\r\n                                        </div>)\r\n                                        }\r\n                                    )\r\n                                )))}\r\n            </Styles>\r\n        );\r\n    }\r\n}","import React from 'react';\nimport Board from \"./components/Board\";\nimport io from \"socket.io-client\";\nimport Landing from './screens/Landing';\nimport InGame from './screens/InGame';\nimport Lobby from './screens/Lobby';\nimport GameOver from './screens/GameOver';\n\ninterface AppState {\n  userId: string,\n  gameState: GameState,\n  board: number[][],\n  gameId: number,\n  roomName: string,\n  username: string,\n  isHost: boolean,\n  players: any[],\n  startingDate: number\n}\n\nenum GameState {\n  LANDING, LOBBY, PLAYING, OVER\n}\n\nclass App extends React.Component<any, AppState> {\n  state: AppState;\n  socket: any;\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      userId: \"\",\n      gameState: GameState.LANDING,\n      board: [],\n      gameId: -1,\n      roomName: \"Game #0\",\n      username: \"Sample User\",\n      players: [],\n      isHost: true,\n      startingDate: -1\n    };\n    this.socket = io(\"https://sudoku-race.herokuapp.com\");\n  }\n  componentDidMount() {\n    this.socket.on(\"user_data\", (data: any) => {\n      this.setState({\n        userId: data.user_id\n      });\n    });\n    this.socket.on(\"user_disconnected\", (data: any) => {\n      let players = [...this.state.players];\n      players = players.filter(pl => pl.id !== data.user_id);\n      this.setState({players});\n    });\n    this.socket.on(\"connection_error\", (data: any) => {\n      let {message} = data;\n      alert(message);\n    })\n    this.socket.on(\"player_joined\", (data: any) => {\n      let players = [...this.state.players];\n      players.push(data);\n      this.setState({players});\n    });\n    this.socket.on(\"user_ready_update\", (data: any) => {\n      let players = [...this.state.players];\n      players = players.map(p => {\n        if(p.id === data.user_id) {\n          return ({id: p.id, username: p.username, hosting: p.hosting, ready: true});\n        }\n        return p;\n      });\n      this.setState({players});\n    });\n    this.socket.on(\"start_game_\", (data: any) => {\n      this.setState({\n        startingDate: Date.now(),\n        gameState: GameState.PLAYING\n      });\n    });\n    this.socket.on('user_finished', (data: any) => {\n      let {user_id, time_passed} = data;\n      let players = [...this.state.players];\n      let player_finished_count = 1;\n      players = players.map(p => {\n        if(p.finished) player_finished_count++;\n        if(p.id === user_id) {\n          return ({id: p.id, username: p.username, hosting: p.hosting, ready: p.ready, time_passed, finished: true});\n        }\n        return p;\n      });\n      if(player_finished_count === players.length) {\n        this.setState({gameState: GameState.OVER,players});\n      } else {\n        this.setState({players});\n      }\n    })\n  }\n  onStart = () => {\n    this.socket.emit('start_game', {game_id: this.state.gameId});\n  }\n  onEnd = () => {\n    this.setState({gameState: GameState.OVER});\n  }\n  render(): React.ReactNode {\n    return (\n      <div>\n        {\n          this.state.gameState === GameState.LANDING ? \n            <Landing socket={this.socket} userId={this.state.userId} onConnect={(data: any) => {\n                this.setState({...data, gameState: GameState.LOBBY});\n            }}/>\n          : null\n        }\n        {\n          this.state.gameState === GameState.LOBBY ? \n          <Lobby onStart={this.onStart} socket={this.socket} gameId={this.state.gameId} isHost={this.state.isHost} roomName={this.state.roomName} players={this.state.players} player={{id: this.state.userId, username: this.state.username}}/> : null\n        }\n        {\n          this.state.gameState === GameState.PLAYING ? \n          <InGame roomName={this.state.roomName} gameId={this.state.gameId} socket={this.socket} board={this.state.board} startingDate={this.state.startingDate} players={this.state.players}/> : null\n        }\n        {\n          this.state.gameState === GameState.OVER ? \n          <GameOver players={this.state.players} roomName={this.state.roomName}/> : null\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import * as React from \"react\";\r\nimport Board from \"../components/Board\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport ListGroup from \"react-bootstrap/ListGroup\";\r\n\r\ninterface InGameState {\r\n    board: any[][],\r\n    originalBoard: number[][],\r\n    players: any[],\r\n    time_passed: number\r\n}\r\n\r\ninterface InGameProps {\r\n    board: number[][],\r\n    startingDate: number,\r\n    players: any[],\r\n    socket: any,\r\n    roomName: any,\r\n    gameId: any,\r\n}\r\n\r\nexport const timeParser: (c: number) => string[] = (millis: number) => {\r\n    var res: string[] = ['','',''];\r\n    let k = millis;\r\n    let hrs = Math.floor(k / 3600000);\r\n    if(hrs < 10) {\r\n        res[0] = `0${hrs}`;\r\n    } else {\r\n        res[0] = hrs.toString();\r\n    }\r\n    k %= 3600000;\r\n    let mins = Math.floor((k) / 60000);\r\n    if(mins < 10) {\r\n        res[1] = `0${mins}`;\r\n    } else {\r\n        res[1] = mins.toString();\r\n    }\r\n    k %= 60000;\r\n    let secs = Math.floor(k / 1000);\r\n    if(secs < 10) {\r\n        res[2] = `0${secs}`;\r\n    } else {\r\n        res[2] = secs.toString();\r\n    }\r\n    return res;\r\n}\r\n\r\nexport default class InGame extends React.PureComponent<InGameProps, InGameState> {\r\n    state: InGameState;\r\n    socket: any;\r\n    timer: any = null;\r\n    ingameBoard: any = null;\r\n    constructor(props: InGameProps) {\r\n        super(props);\r\n        this.state = {\r\n            board: this.copy2dArray(props.board),\r\n            originalBoard: this.copy2dArray(props.board),\r\n            players: props.players,\r\n            time_passed: 0\r\n        }\r\n        this.socket = props.socket;\r\n    }\r\n    copy2dArray(arr: any[][]): any[][] {\r\n        let res: any[][] = [];\r\n        arr.forEach(row => {\r\n            var curr: any[] = [];\r\n            row.forEach(col => curr.push(col));\r\n            res.push(curr);\r\n        })\r\n        return res;\r\n    }\r\n    componentDidMount() {\r\n        this.timer = setInterval(() => {\r\n            this.setState({\r\n                time_passed: this.state.time_passed + 100\r\n            });\r\n        },100);\r\n    }\r\n    componentWillReceiveProps(np: InGameProps) {\r\n        if(np.players) {\r\n            this.setState({players: np.players});\r\n        }\r\n    }\r\n\r\n    updatePlayer = (board: any) => {\r\n        let n = board.filter((row: any) => row.filter((col: any) => col === \"\").length !== 0).length === 0;\r\n        if(n || !n) {\r\n            this.socket.emit(\"board_check\", {\r\n                game_id: this.props.gameId,\r\n                board,\r\n                time_passed: this.state.time_passed\r\n            });\r\n        }\r\n    }\r\n    render(): React.ReactNode {\r\n        var parsed = timeParser(this.state.time_passed);\r\n        return(\r\n            <div style={{width: \"100vw\", minHeight: \"100vh\", display: \"flex\", justifyContent: \"space-around\", alignItems: \"center\"}}>\r\n                <Board ref={r => this.ingameBoard = r} onCheck={this.updatePlayer} initalBoard={this.state.board}/>\r\n                <Card style={{width: \"40%\"}}>\r\n                    <Card.Header>{this.props.roomName}</Card.Header>\r\n                    <Card.Header><h1>{parsed[0]}:{parsed[1]}:{parsed[2]}</h1></Card.Header>\r\n                    <ListGroup variant=\"flush\">\r\n                        {\r\n                            this.state.players.map(pl => \r\n                                <ListGroup.Item style={{display: \"flex\", alignItems: \"center\", justifyContent: \"space-between\"}} variant={pl.finished ? \"success\" : \"warning\"}>\r\n                                    <span>{pl.username}</span>\r\n                                    <span>{pl.finished ? `Done in ${timeParser(pl.time_passed).join(\":\")}` : \"Solving\"}</span>\r\n                                </ListGroup.Item>\r\n                            )\r\n                        }\r\n                    </ListGroup>\r\n                    <Card.Footer>\r\n                        <Button onClick={(e: any) => this.ingameBoard.performOnCheck()}>\r\n                            Submit\r\n                        </Button>\r\n                    </Card.Footer>\r\n                </Card>\r\n            </div>\r\n        );\r\n    }\r\n}","import * as React from \"react\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport ListGroup from \"react-bootstrap/ListGroup\";\r\n\r\ninterface LobbyState {\r\n    player: any,\r\n    players: any[],\r\n    isReady: boolean\r\n}\r\ninterface LobbyProps {\r\n    player: any,\r\n    players?: any[],\r\n    gameMode?: string,\r\n    roomName: string,\r\n    isHost: boolean,\r\n    gameId?: any,\r\n    socket: any,\r\n    onStart: any,\r\n}\r\n\r\nexport default class Lobby extends React.PureComponent<LobbyProps, LobbyState> {\r\n    state: LobbyState;\r\n    socket: any;\r\n    constructor(props: LobbyProps) {\r\n        super(props);\r\n        this.state = {\r\n            players: props.players ? props.players : [],\r\n            player: props.player,\r\n            isReady: props.isHost\r\n        }\r\n        this.socket = props.socket;\r\n    }\r\n    componentWillReceiveProps(np: LobbyProps) {\r\n        if(np.players) {\r\n            this.setState({players: np.players});\r\n        }\r\n    }\r\n    render(): React.ReactNode {\r\n        return(\r\n            <div style={{width: \"100vw\", height: \"100vh\", alignItems: \"center\", justifyContent: \"center\", display: \"flex\"}}>\r\n                <Card style={{ minWidth: \"60%\"}}>\r\n                    <Card.Header>\r\n                        <span>Lobby</span>\r\n                    </Card.Header>\r\n                    <Card.Header>\r\n                         <h1>{this.props.roomName}</h1><br />\r\n                         ID: <span style={{fontWeight: \"bold\", }}>{this.props.gameId}</span> <br /> \r\n                    </Card.Header>\r\n                    <ListGroup variant=\"flush\">\r\n                        <ListGroup.Item>\r\n                            <Card style={{ minWidth: \"60%\"}}>\r\n                                <Card.Header>Players</Card.Header>\r\n                                <ListGroup variant=\"flush\">\r\n                                    {\r\n                                        this.state.players.map(pl => \r\n                                            <ListGroup.Item style={{display: \"flex\", alignItems: \"center\", justifyContent: \"space-between\"}} variant={pl.ready ? \"success\" : (pl.hosting ? \"primary\" : \"warning\")}>\r\n                                                <span>{pl.username}</span>\r\n                                                <span>{pl.ready ? \"Ready\" : (pl.hosting ? \"Host\" : \"Waiting\")}</span>\r\n                                            </ListGroup.Item>\r\n                                        )\r\n                                    }\r\n                                </ListGroup>\r\n                            </Card>\r\n                        </ListGroup.Item>\r\n                        <ListGroup.Item>\r\n                            {\r\n                                this.props.isHost ? \r\n                                \r\n                                <Button onClick={this.props.onStart}>\r\n                                    {(this.state.players.filter(pl => {\r\n                                        return (!pl.ready && !pl.hosting);\r\n                                    }).length === 0) ? \"Start\" : \"Waiting...\"}\r\n                                </Button> \r\n                                    : \r\n                                <Button disabled={this.state.isReady} onClick={(e: any) => {\r\n                                    this.socket.emit(\"user_ready\", {game_id: this.props.gameId});\r\n                                    this.setState({isReady: true});\r\n                                }}>\r\n                                    Ready\r\n                                </Button>\r\n                            }\r\n                        </ListGroup.Item>\r\n                    </ListGroup>\r\n                </Card>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}","import * as React from \"react\";\r\nimport Table from \"react-bootstrap/Table\";\r\nimport {timeParser} from \"./InGame\";\r\n\r\ninterface GameOverProps {\r\n    players: any[],\r\n    roomName: string\r\n}\r\n\r\nexport default class GameOver extends React.PureComponent<GameOverProps, any> {\r\n    constructor(props: any) {\r\n        super(props);\r\n    }\r\n\r\n    render(): React.ReactNode {\r\n        const playersSorted = this.props.players.sort((a,b) => a.time_passed - b.time_passed);\r\n        return(\r\n            <div style={{minWidth: \"100vw\", minHeight: \"100vh\", alignItems: \"center\", justifyContent: \"center\", display: \"flex\"}}>\r\n                <Table style={{minWidth: \"60%\"}} striped bordered hover variant=\"dark\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>#</th>\r\n                            <th>Username</th>\r\n                            <th>Time Elapsed</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {React.createElement(\"div\", null, ...playersSorted.map((pl, i) => \r\n                        <tr>\r\n                            <td>{i + 1}</td>\r\n                            <td>{pl.username}</td>\r\n                            <td>{timeParser(pl.time_passed).join(\":\")}</td>\r\n                        </tr>\r\n                        ))}\r\n                        <tr>\r\n                            <td colSpan={3}>{this.props.roomName}</td>\r\n                        </tr>\r\n                    </tbody>\r\n                </Table>\r\n            </div>    \r\n        );\r\n    }\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}